// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.0
// source: driverpc.proto

package driverpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Request_ReqType int32

const (
	Request_SHUTDOWN Request_ReqType = 0
	Request_INPUT    Request_ReqType = 1
)

// Enum value maps for Request_ReqType.
var (
	Request_ReqType_name = map[int32]string{
		0: "SHUTDOWN",
		1: "INPUT",
	}
	Request_ReqType_value = map[string]int32{
		"SHUTDOWN": 0,
		"INPUT":    1,
	}
)

func (x Request_ReqType) Enum() *Request_ReqType {
	p := new(Request_ReqType)
	*p = x
	return p
}

func (x Request_ReqType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Request_ReqType) Descriptor() protoreflect.EnumDescriptor {
	return file_driverpc_proto_enumTypes[0].Descriptor()
}

func (Request_ReqType) Type() protoreflect.EnumType {
	return &file_driverpc_proto_enumTypes[0]
}

func (x Request_ReqType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Request_ReqType.Descriptor instead.
func (Request_ReqType) EnumDescriptor() ([]byte, []int) {
	return file_driverpc_proto_rawDescGZIP(), []int{4, 0}
}

type IO_IOTypes int32

const (
	IO_TEXT   IO_IOTypes = 0
	IO_INT    IO_IOTypes = 1
	IO_DOUBLE IO_IOTypes = 2
	IO_BUTTON IO_IOTypes = 3
	IO_SLIDER IO_IOTypes = 4
	IO_COLOR  IO_IOTypes = 5
	IO_IMG    IO_IOTypes = 6
)

// Enum value maps for IO_IOTypes.
var (
	IO_IOTypes_name = map[int32]string{
		0: "TEXT",
		1: "INT",
		2: "DOUBLE",
		3: "BUTTON",
		4: "SLIDER",
		5: "COLOR",
		6: "IMG",
	}
	IO_IOTypes_value = map[string]int32{
		"TEXT":   0,
		"INT":    1,
		"DOUBLE": 2,
		"BUTTON": 3,
		"SLIDER": 4,
		"COLOR":  5,
		"IMG":    6,
	}
)

func (x IO_IOTypes) Enum() *IO_IOTypes {
	p := new(IO_IOTypes)
	*p = x
	return p
}

func (x IO_IOTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IO_IOTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_driverpc_proto_enumTypes[1].Descriptor()
}

func (IO_IOTypes) Type() protoreflect.EnumType {
	return &file_driverpc_proto_enumTypes[1]
}

func (x IO_IOTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IO_IOTypes.Descriptor instead.
func (IO_IOTypes) EnumDescriptor() ([]byte, []int) {
	return file_driverpc_proto_rawDescGZIP(), []int{7, 0}
}

// The credential struct for communication
type Credential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverID []byte `protobuf:"bytes,1,opt,name=driverID,proto3" json:"driverID,omitempty"`
	Token    []byte `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *Credential) Reset() {
	*x = Credential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_driverpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_driverpc_proto_rawDescGZIP(), []int{0}
}

func (x *Credential) GetDriverID() []byte {
	if x != nil {
		return x.DriverID
	}
	return nil
}

func (x *Credential) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

// The request message containing the user's name.
type LogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credential *Credential `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
	Message    string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LogRequest) Reset() {
	*x = LogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRequest) ProtoMessage() {}

func (x *LogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_driverpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRequest.ProtoReflect.Descriptor instead.
func (*LogRequest) Descriptor() ([]byte, []int) {
	return file_driverpc_proto_rawDescGZIP(), []int{1}
}

func (x *LogRequest) GetCredential() *Credential {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *LogRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// The response message from the server to the driver
type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Reference []byte `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_driverpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_driverpc_proto_rawDescGZIP(), []int{2}
}

func (x *Result) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *Result) GetReference() []byte {
	if x != nil {
		return x.Reference
	}
	return nil
}

// The response message from the driver to the server
type Confirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credential *Credential   `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
	Input      *InputCommand `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *Confirmation) Reset() {
	*x = Confirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Confirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Confirmation) ProtoMessage() {}

func (x *Confirmation) ProtoReflect() protoreflect.Message {
	mi := &file_driverpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Confirmation.ProtoReflect.Descriptor instead.
func (*Confirmation) Descriptor() ([]byte, []int) {
	return file_driverpc_proto_rawDescGZIP(), []int{3}
}

func (x *Confirmation) GetCredential() *Credential {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *Confirmation) GetInput() *InputCommand {
	if x != nil {
		return x.Input
	}
	return nil
}

// The command polled from the center
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  Request_ReqType `protobuf:"varint,1,opt,name=type,proto3,enum=driverpc.Request_ReqType" json:"type,omitempty"`
	Input *InputCommand   `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_driverpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_driverpc_proto_rawDescGZIP(), []int{4}
}

func (x *Request) GetType() Request_ReqType {
	if x != nil {
		return x.Type
	}
	return Request_SHUTDOWN
}

func (x *Request) GetInput() *InputCommand {
	if x != nil {
		return x.Input
	}
	return nil
}

// The input type
type InputCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName     string `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	DeviceCode   []byte `protobuf:"bytes,2,opt,name=deviceCode,proto3" json:"deviceCode,omitempty"`
	DeviceAddres []byte `protobuf:"bytes,3,opt,name=deviceAddres,proto3" json:"deviceAddres,omitempty"`
	InputCode    []byte `protobuf:"bytes,4,opt,name=inputCode,proto3" json:"inputCode,omitempty"`
	Value        string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InputCommand) Reset() {
	*x = InputCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputCommand) ProtoMessage() {}

func (x *InputCommand) ProtoReflect() protoreflect.Message {
	mi := &file_driverpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputCommand.ProtoReflect.Descriptor instead.
func (*InputCommand) Descriptor() ([]byte, []int) {
	return file_driverpc_proto_rawDescGZIP(), []int{5}
}

func (x *InputCommand) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *InputCommand) GetDeviceCode() []byte {
	if x != nil {
		return x.DeviceCode
	}
	return nil
}

func (x *InputCommand) GetDeviceAddres() []byte {
	if x != nil {
		return x.DeviceAddres
	}
	return nil
}

func (x *InputCommand) GetInputCode() []byte {
	if x != nil {
		return x.InputCode
	}
	return nil
}

func (x *InputCommand) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// The Device definition
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credential *Credential `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
	Code       []byte      `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"` //A specific code for each device a driver can handle
	Address    []byte      `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Name       string      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Icon       string      `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	Inputs     []*IO       `protobuf:"bytes,6,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs    []*IO       `protobuf:"bytes,7,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_driverpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_driverpc_proto_rawDescGZIP(), []int{6}
}

func (x *Device) GetCredential() *Credential {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *Device) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Device) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Device) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Device) GetInputs() []*IO {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Device) GetOutputs() []*IO {
	if x != nil {
		return x.Outputs
	}
	return nil
}

// The Device's input definition
type IO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   IO_IOTypes `protobuf:"varint,1,opt,name=type,proto3,enum=driverpc.IO_IOTypes" json:"type,omitempty"`
	Code   []byte     `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name   string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Value  string     `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Ranges []string   `protobuf:"bytes,5,rep,name=ranges,proto3" json:"ranges,omitempty"`
}

func (x *IO) Reset() {
	*x = IO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IO) ProtoMessage() {}

func (x *IO) ProtoReflect() protoreflect.Message {
	mi := &file_driverpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IO.ProtoReflect.Descriptor instead.
func (*IO) Descriptor() ([]byte, []int) {
	return file_driverpc_proto_rawDescGZIP(), []int{7}
}

func (x *IO) GetType() IO_IOTypes {
	if x != nil {
		return x.Type
	}
	return IO_TEXT
}

func (x *IO) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *IO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IO) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *IO) GetRanges() []string {
	if x != nil {
		return x.Ranges
	}
	return nil
}

// The report message to the center
type ReportMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credential *Credential `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
	DeviceCode []byte      `protobuf:"bytes,2,opt,name=deviceCode,proto3" json:"deviceCode,omitempty"`
	OutputCode []byte      `protobuf:"bytes,3,opt,name=outputCode,proto3" json:"outputCode,omitempty"`
	Value      string      `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ReportMessage) Reset() {
	*x = ReportMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportMessage) ProtoMessage() {}

func (x *ReportMessage) ProtoReflect() protoreflect.Message {
	mi := &file_driverpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportMessage.ProtoReflect.Descriptor instead.
func (*ReportMessage) Descriptor() ([]byte, []int) {
	return file_driverpc_proto_rawDescGZIP(), []int{8}
}

func (x *ReportMessage) GetCredential() *Credential {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *ReportMessage) GetDeviceCode() []byte {
	if x != nil {
		return x.DeviceCode
	}
	return nil
}

func (x *ReportMessage) GetOutputCode() []byte {
	if x != nil {
		return x.OutputCode
	}
	return nil
}

func (x *ReportMessage) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_driverpc_proto protoreflect.FileDescriptor

var file_driverpc_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x63, 0x22, 0x3e, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5c, 0x0a, 0x0a, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3e, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x72, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2c,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x8a, 0x01, 0x0a,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x22, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x01, 0x22, 0xa2, 0x01, 0x0a, 0x0c, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe2,
	0x01, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x63,
	0x2e, 0x49, 0x4f, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x07, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x4f, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x02, 0x49, 0x4f, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x4f, 0x2e, 0x49, 0x4f, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x07, 0x49, 0x4f,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42,
	0x4c, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05,
	0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4d, 0x47, 0x10, 0x06,
	0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x9f,
	0x01, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x04, 0x57,
	0x61, 0x72, 0x6e, 0x12, 0x14, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x31, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x32, 0xd8, 0x02, 0x0a, 0x09, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x50, 0x49, 0x12, 0x3a,
	0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x1a, 0x11, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x16, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x10, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x10, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0a, 0x67,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x1a,
	0x10, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x10, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x42, 0x3a, 0x5a, 0x38, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56, 0x69, 0x6e, 0x67, 0x67, 0x75,
	0x69, 0x2f, 0x69, 0x61, 0x75, 0x74, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_driverpc_proto_rawDescOnce sync.Once
	file_driverpc_proto_rawDescData = file_driverpc_proto_rawDesc
)

func file_driverpc_proto_rawDescGZIP() []byte {
	file_driverpc_proto_rawDescOnce.Do(func() {
		file_driverpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_driverpc_proto_rawDescData)
	})
	return file_driverpc_proto_rawDescData
}

var file_driverpc_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_driverpc_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_driverpc_proto_goTypes = []interface{}{
	(Request_ReqType)(0),  // 0: driverpc.Request.ReqType
	(IO_IOTypes)(0),       // 1: driverpc.IO.IOTypes
	(*Credential)(nil),    // 2: driverpc.Credential
	(*LogRequest)(nil),    // 3: driverpc.LogRequest
	(*Result)(nil),        // 4: driverpc.Result
	(*Confirmation)(nil),  // 5: driverpc.Confirmation
	(*Request)(nil),       // 6: driverpc.Request
	(*InputCommand)(nil),  // 7: driverpc.InputCommand
	(*Device)(nil),        // 8: driverpc.Device
	(*IO)(nil),            // 9: driverpc.IO
	(*ReportMessage)(nil), // 10: driverpc.ReportMessage
}
var file_driverpc_proto_depIdxs = []int32{
	2,  // 0: driverpc.LogRequest.credential:type_name -> driverpc.Credential
	2,  // 1: driverpc.Confirmation.credential:type_name -> driverpc.Credential
	7,  // 2: driverpc.Confirmation.input:type_name -> driverpc.InputCommand
	0,  // 3: driverpc.Request.type:type_name -> driverpc.Request.ReqType
	7,  // 4: driverpc.Request.input:type_name -> driverpc.InputCommand
	2,  // 5: driverpc.Device.credential:type_name -> driverpc.Credential
	9,  // 6: driverpc.Device.inputs:type_name -> driverpc.IO
	9,  // 7: driverpc.Device.outputs:type_name -> driverpc.IO
	1,  // 8: driverpc.IO.type:type_name -> driverpc.IO.IOTypes
	2,  // 9: driverpc.ReportMessage.credential:type_name -> driverpc.Credential
	3,  // 10: driverpc.Logger.Info:input_type -> driverpc.LogRequest
	3,  // 11: driverpc.Logger.Warn:input_type -> driverpc.LogRequest
	3,  // 12: driverpc.Logger.Error:input_type -> driverpc.LogRequest
	2,  // 13: driverpc.centerAPI.pollRequest:input_type -> driverpc.Credential
	5,  // 14: driverpc.centerAPI.confirm:input_type -> driverpc.Confirmation
	10, // 15: driverpc.centerAPI.report:input_type -> driverpc.ReportMessage
	8,  // 16: driverpc.centerAPI.setDevice:input_type -> driverpc.Device
	2,  // 17: driverpc.centerAPI.getDevices:input_type -> driverpc.Credential
	8,  // 18: driverpc.centerAPI.deleteDevice:input_type -> driverpc.Device
	4,  // 19: driverpc.Logger.Info:output_type -> driverpc.Result
	4,  // 20: driverpc.Logger.Warn:output_type -> driverpc.Result
	4,  // 21: driverpc.Logger.Error:output_type -> driverpc.Result
	6,  // 22: driverpc.centerAPI.pollRequest:output_type -> driverpc.Request
	4,  // 23: driverpc.centerAPI.confirm:output_type -> driverpc.Result
	4,  // 24: driverpc.centerAPI.report:output_type -> driverpc.Result
	4,  // 25: driverpc.centerAPI.setDevice:output_type -> driverpc.Result
	8,  // 26: driverpc.centerAPI.getDevices:output_type -> driverpc.Device
	4,  // 27: driverpc.centerAPI.deleteDevice:output_type -> driverpc.Result
	19, // [19:28] is the sub-list for method output_type
	10, // [10:19] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_driverpc_proto_init() }
func file_driverpc_proto_init() {
	if File_driverpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_driverpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Confirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_driverpc_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_driverpc_proto_goTypes,
		DependencyIndexes: file_driverpc_proto_depIdxs,
		EnumInfos:         file_driverpc_proto_enumTypes,
		MessageInfos:      file_driverpc_proto_msgTypes,
	}.Build()
	File_driverpc_proto = out.File
	file_driverpc_proto_rawDesc = nil
	file_driverpc_proto_goTypes = nil
	file_driverpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LoggerClient is the client API for Logger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoggerClient interface {
	// Sends a greeting
	Info(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Result, error)
	Warn(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Result, error)
	Error(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Result, error)
}

type loggerClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggerClient(cc grpc.ClientConnInterface) LoggerClient {
	return &loggerClient{cc}
}

func (c *loggerClient) Info(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/driverpc.Logger/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) Warn(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/driverpc.Logger/Warn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) Error(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/driverpc.Logger/Error", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggerServer is the server API for Logger service.
type LoggerServer interface {
	// Sends a greeting
	Info(context.Context, *LogRequest) (*Result, error)
	Warn(context.Context, *LogRequest) (*Result, error)
	Error(context.Context, *LogRequest) (*Result, error)
}

// UnimplementedLoggerServer can be embedded to have forward compatible implementations.
type UnimplementedLoggerServer struct {
}

func (*UnimplementedLoggerServer) Info(context.Context, *LogRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedLoggerServer) Warn(context.Context, *LogRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Warn not implemented")
}
func (*UnimplementedLoggerServer) Error(context.Context, *LogRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Error not implemented")
}

func RegisterLoggerServer(s *grpc.Server, srv LoggerServer) {
	s.RegisterService(&_Logger_serviceDesc, srv)
}

func _Logger_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driverpc.Logger/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).Info(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_Warn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).Warn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driverpc.Logger/Warn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).Warn(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_Error_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).Error(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driverpc.Logger/Error",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).Error(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Logger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "driverpc.Logger",
	HandlerType: (*LoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Logger_Info_Handler,
		},
		{
			MethodName: "Warn",
			Handler:    _Logger_Warn_Handler,
		},
		{
			MethodName: "Error",
			Handler:    _Logger_Error_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "driverpc.proto",
}

// CenterAPIClient is the client API for CenterAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CenterAPIClient interface {
	PollRequest(ctx context.Context, in *Credential, opts ...grpc.CallOption) (CenterAPI_PollRequestClient, error)
	Confirm(ctx context.Context, in *Confirmation, opts ...grpc.CallOption) (*Result, error)
	Report(ctx context.Context, in *ReportMessage, opts ...grpc.CallOption) (*Result, error)
	SetDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Result, error)
	GetDevices(ctx context.Context, in *Credential, opts ...grpc.CallOption) (CenterAPI_GetDevicesClient, error)
	DeleteDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Result, error)
}

type centerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCenterAPIClient(cc grpc.ClientConnInterface) CenterAPIClient {
	return &centerAPIClient{cc}
}

func (c *centerAPIClient) PollRequest(ctx context.Context, in *Credential, opts ...grpc.CallOption) (CenterAPI_PollRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CenterAPI_serviceDesc.Streams[0], "/driverpc.centerAPI/pollRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &centerAPIPollRequestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CenterAPI_PollRequestClient interface {
	Recv() (*Request, error)
	grpc.ClientStream
}

type centerAPIPollRequestClient struct {
	grpc.ClientStream
}

func (x *centerAPIPollRequestClient) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *centerAPIClient) Confirm(ctx context.Context, in *Confirmation, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/driverpc.centerAPI/confirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerAPIClient) Report(ctx context.Context, in *ReportMessage, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/driverpc.centerAPI/report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerAPIClient) SetDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/driverpc.centerAPI/setDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerAPIClient) GetDevices(ctx context.Context, in *Credential, opts ...grpc.CallOption) (CenterAPI_GetDevicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CenterAPI_serviceDesc.Streams[1], "/driverpc.centerAPI/getDevices", opts...)
	if err != nil {
		return nil, err
	}
	x := &centerAPIGetDevicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CenterAPI_GetDevicesClient interface {
	Recv() (*Device, error)
	grpc.ClientStream
}

type centerAPIGetDevicesClient struct {
	grpc.ClientStream
}

func (x *centerAPIGetDevicesClient) Recv() (*Device, error) {
	m := new(Device)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *centerAPIClient) DeleteDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/driverpc.centerAPI/deleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CenterAPIServer is the server API for CenterAPI service.
type CenterAPIServer interface {
	PollRequest(*Credential, CenterAPI_PollRequestServer) error
	Confirm(context.Context, *Confirmation) (*Result, error)
	Report(context.Context, *ReportMessage) (*Result, error)
	SetDevice(context.Context, *Device) (*Result, error)
	GetDevices(*Credential, CenterAPI_GetDevicesServer) error
	DeleteDevice(context.Context, *Device) (*Result, error)
}

// UnimplementedCenterAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCenterAPIServer struct {
}

func (*UnimplementedCenterAPIServer) PollRequest(*Credential, CenterAPI_PollRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method PollRequest not implemented")
}
func (*UnimplementedCenterAPIServer) Confirm(context.Context, *Confirmation) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Confirm not implemented")
}
func (*UnimplementedCenterAPIServer) Report(context.Context, *ReportMessage) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (*UnimplementedCenterAPIServer) SetDevice(context.Context, *Device) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDevice not implemented")
}
func (*UnimplementedCenterAPIServer) GetDevices(*Credential, CenterAPI_GetDevicesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (*UnimplementedCenterAPIServer) DeleteDevice(context.Context, *Device) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}

func RegisterCenterAPIServer(s *grpc.Server, srv CenterAPIServer) {
	s.RegisterService(&_CenterAPI_serviceDesc, srv)
}

func _CenterAPI_PollRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Credential)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CenterAPIServer).PollRequest(m, &centerAPIPollRequestServer{stream})
}

type CenterAPI_PollRequestServer interface {
	Send(*Request) error
	grpc.ServerStream
}

type centerAPIPollRequestServer struct {
	grpc.ServerStream
}

func (x *centerAPIPollRequestServer) Send(m *Request) error {
	return x.ServerStream.SendMsg(m)
}

func _CenterAPI_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Confirmation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterAPIServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driverpc.centerAPI/Confirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterAPIServer).Confirm(ctx, req.(*Confirmation))
	}
	return interceptor(ctx, in, info, handler)
}

func _CenterAPI_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterAPIServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driverpc.centerAPI/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterAPIServer).Report(ctx, req.(*ReportMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CenterAPI_SetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterAPIServer).SetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driverpc.centerAPI/SetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterAPIServer).SetDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _CenterAPI_GetDevices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Credential)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CenterAPIServer).GetDevices(m, &centerAPIGetDevicesServer{stream})
}

type CenterAPI_GetDevicesServer interface {
	Send(*Device) error
	grpc.ServerStream
}

type centerAPIGetDevicesServer struct {
	grpc.ServerStream
}

func (x *centerAPIGetDevicesServer) Send(m *Device) error {
	return x.ServerStream.SendMsg(m)
}

func _CenterAPI_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterAPIServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driverpc.centerAPI/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterAPIServer).DeleteDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

var _CenterAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "driverpc.centerAPI",
	HandlerType: (*CenterAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "confirm",
			Handler:    _CenterAPI_Confirm_Handler,
		},
		{
			MethodName: "report",
			Handler:    _CenterAPI_Report_Handler,
		},
		{
			MethodName: "setDevice",
			Handler:    _CenterAPI_SetDevice_Handler,
		},
		{
			MethodName: "deleteDevice",
			Handler:    _CenterAPI_DeleteDevice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "pollRequest",
			Handler:       _CenterAPI_PollRequest_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getDevices",
			Handler:       _CenterAPI_GetDevices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "driverpc.proto",
}
